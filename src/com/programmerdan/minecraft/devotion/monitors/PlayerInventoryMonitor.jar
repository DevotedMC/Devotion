package com.programmerdan.minecraft.devotion.monitors;

public class PlayerInventoryMonitor extends Monitor implements Listener {

	private PlayerInventoryMonitorConfig config;
	
	/**
	 * Records the last time a datapoint was captured
	 */
	private ConcurrentHashMap<UUID, long[]> lastCapture;
	
	private boolean checkInsert(UUID player, PlayerInventoryType pit) {
		if (!checkDelay) {
			return true;
		} else {
			long[] captureTimes = lastCapture.get(player);
			if (captureTimes == null) {
				captureTimes = new long[PlayerInteractionType.SIZE];
				lastCapture.put(player, captureTimes);
			}
			long now = System.currentTimeMillis();
			boolean res = (now - captureTimes[pit.getIdx()]) > config.delayBetweenSamples;
			captureTimes[pit.getIdx()] = now;
			return res;
		}
	}
	
	private boolean checkDelay = true; 
	
	protected PlayerInteractionMonitorConfig getConfig() {
		return config;
	}
	
	private PlayerInteractionMonitor(PlayerInteractionMonitorConfig config) {
		super("interaction");
		this.config = config;
	}
	
	public static PlayerInteractionMonitor generate(ConfigurationSection config) {
		if (config == null) return null;
		PlayerInteractionMonitorConfig pimc = new PlayerInteractionMonitorConfig();
		pimc.delayBetweenSamples = config.getLong("sampling_delay", 10l);
		PlayerInteractionMonitor pim = new PlayerInteractionMonitor(pimc);
		pim.setDebug(config.getBoolean("debug", Devotion.instance().isDebug()));
		return pim;
	}
	
	@Override
	public void onEnable() {
		if (super.isEnabled()) {
			return;
		}
		

